# Copyright (c) 2024, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: lateststage2_enc-ft_adp-ft_llm-lora_asr_ast_alpaca.ta.aa0.05_suno.ta0.1_magpie.gemma.mixed0.1_text0.5_lr2e-5_max30k

trainer:
  devices: -1
  accelerator: gpu
  num_nodes: ???  # depends on SLURM environment
  precision: bf16
  logger: false # logger provided by exp_manager
  enable_checkpointing: false
  use_distributed_sampler: false
  max_epochs: -1
  max_steps: 30000 # consumed_samples = global_step * micro_batch_size * data_parallel_size * accumulate_grad_batches
  limit_train_batches: 200000
  log_every_n_steps: 50 # frequency with which training steps are logged 
  val_check_interval: 50000 # If is an int n > 1, will run val every n training steps, if a float 0.0 - 1.0 will run val every epoch fraction, e.g. 0.25 will run val every quarter epoch
  gradient_clip_val: 1.0
  accumulate_grad_batches: 1
  benchmark: false
  num_sanity_val_steps: 0

model_target: nemo.collections.multimodal.speech_llm.models.modular_models.ModularAudioGPTModel

exp_manager:
  # explicit_log_dir: null
  exp_dir: /results/
  name: ${name}
  create_wandb_logger: true
  wandb_logger_kwargs:
    project: null
    name: ${name}
    resume: true
  resume_if_exists: true
  resume_ignore_no_checkpoint: true
  create_checkpoint_callback: true
  checkpoint_callback_params:
    monitor: validation_bleu # validation_${model.data.validation_ds.metric.name}
    mode: max
    save_top_k: 1
    save_nemo_on_train_end: true
    filename: '${name}--{${exp_manager.checkpoint_callback_params.monitor}:.3f}-{step}-{epoch}'
    model_parallel_size: ${model.tensor_model_parallel_size}
    always_save_nemo: false
    save_best_model: true
  create_early_stopping_callback: false
  early_stopping_callback_params:
    monitor: validation_loss
    mode: "min"
    min_delta: 0.0001
    patience: 20
    verbose: true
    strict: false # Should be false to avoid a runtime error where EarlyStopping says monitor is unavailable, which sometimes happens with resumed training.
  max_time_per_run: "00:03:55:00"

model:
  seed: 1234
  tensor_model_parallel_size: 1 # intra-layer model parallelism
  pipeline_model_parallel_size: 1 # inter-layer model parallelism

  pretrained_audio_model: /lustre/fs8/portfolios/llmservice/users/zhehuaic/pretrained/canary-1b.nemo
  freeze_llm: true
  freeze_audio_encoder: false
  freeze_modality_adapter: false
  load_audio_encoder: false   # do not load audio encoder as we provide a nemo file that contains an encoder (see model.restore_from_path)

  global_batch_size: 128
  micro_batch_size: 16
  restore_from_path: /all_results/yifanp_speechllm_fullcanary_N8/full_canary_newstage1_asr-ast_gemma-2b-nemo1k_enc-ft_adp-ft_llm-frozen_lr1e-4_max100k_mbs1_gbs64/full_canary_newstage1_asr-ast_gemma-2b-nemo1k_enc-ft_adp-ft_llm-frozen_lr1e-4_max100k_mbs1_gbs64/checkpoints/last_full.nemo # Path to an existing .nemo model you wish to add new tasks to or run inference with
  resume_from_checkpoint: null # The path to a checkpoint file to continue the training, restores the whole state including the epoch, step, LR schedulers, apex, etc.
  save_nemo_on_validation_end: false # Saves an inference ready .nemo file every time a checkpoint is saved during training. 
  sync_batch_comm: false
  megatron_amp_O2: false

  ## Sequence Parallelism
  # Makes tensor parallelism more memory efficient for LLMs (20B+) by parallelizing layer norms and dropout sequentially
  # See Reducing Activation Recomputation in Large Transformer Models: https://arxiv.org/abs/2205.05198 for more details.
  sequence_parallel: false

  ## Activation Checkpoint 
  activations_checkpoint_granularity: null # 'selective' or 'full' 
  activations_checkpoint_method: uniform # 'uniform', 'block', not used with 'selective'
  # 'uniform' divides the total number of transformer layers and checkpoints the input activation
  # of each chunk at the specified granularity
  # 'block' checkpoints the specified number of layers per pipeline stage at the specified granularity
  activations_checkpoint_num_layers: null # not used with 'selective'
  activations_checkpoint_layers_per_pipeline: null
  answer_only_loss: true
  gradient_as_bucket_view: true
  use_flash_attention: true

  hidden_dropout: 0.05
  attention_dropout: 0.05
  ffn_dropout: 0.05

  activation: "fast-geglu"  # for lora size match

  modality_loss_weights:
    audio_text: 1.0
    text: 1.0

  peft:
    peft_scheme: "lora"  # can be either lora, adapter, ia3 or ptuning
    restore_from_path: null
    
    # Used for adapter peft training
    adapter_tuning:
      type: 'parallel_adapter' # this should be either 'parallel_adapter' or 'linear_adapter'
      adapter_dim: 32
      adapter_dropout: 0.0
      norm_position: 'pre' # This can be set to 'pre', 'post' or null, 'pre' is normally what is used.
      column_init_method: 'xavier' # IGNORED if linear_adapter is used, options: xavier, zero or normal
      row_init_method: 'zero' # IGNORED if linear_adapter is used, options: xavier, zero or normal
      norm_type: 'mixedfusedlayernorm' # IGNORED if layer_adapter is used,  options are ['layernorm', 'mixedfusedlayernorm']
      layer_selection: null  # selects in which layers to add adapters, e.g. [1,12] will add adapters to layer 1 (lowest) and 12. null will apply adapters to all layers
      weight_tying: false
      position_embedding_strategy: null # used only when weight_tying is true

    lora_tuning:
      target_modules: ['attention_qkv','attention_dense','mlp_fc1','mlp_fc2'] # this can either be 'attention_qkv','attention_dense','mlp_fc1','mlp_fc2', attention (qkv & dense), mlp (fc1 & fc2)
      adapter_dim: 32
      alpha: ${model.peft.lora_tuning.adapter_dim} 
      adapter_dropout: 0.0
      column_init_method: 'xavier' # IGNORED if linear_adapter is used, options: xavier, zero or normal
      row_init_method: 'zero' # IGNORED if linear_adapter is used, options: xavier, zero or normal
      layer_selection:  null  # selects in which layers to add lora adapters. e.g. [1,12] will add lora to layer 1 (lowest) and 12. null will apply adapters to all layers
      weight_tying: false
      position_embedding_strategy: null # used only when weight_tying is true

    # Used for p-tuning peft training
    p_tuning:
      virtual_tokens: 10  # The number of virtual tokens the prompt encoder should add at the start of the sequence
      bottleneck_dim: 1024  # the size of the prompt encoder mlp bottleneck
      embedding_dim: 1024  # the size of the prompt encoder embeddings
      init_std: 0.023

  perception:
    target: nemo.collections.multimodal.speech_llm.modules.perception_modules.AudioPerceptionModule
    use_multi_layer_feat: false
    add_sep: true
    is_canary: true

    xattn:
      target: nemo.collections.multimodal.speech_llm.modules.perception_modules.TransformerCrossAttention
      num_attention_heads: 8
      attn_score_dropout: 0.1
      attn_layer_dropout: 0.1
      ffn_dropout: 0.1
      hidden_act: "relu"
      pre_ln: true
      pre_ln_final_layer_norm: true

    multi_layer_feat:
      layer_idx_list: [0,16]  # layer indices to extract features from
      aggregator:
        mode: "cat"  # ways to combine features from different layers, choices=['cat','sum','mean', 'max', 'min'], default to concat ('cat')
        pooling: "avg"  # ways to pool features if they have different temporal lengths and align_mode=min, choices=['mean', 'max', 'min']
        align_mode: "min"  # if features have different temporal lengths, set `min` to pool to the shortest length or `max` to repeat to the longest.

    modality_adapter: 
      _target_: nemo.collections.asr.modules.ConformerEncoder
      feat_in: 1024
      feat_out: -1 # you may set it if you need different output size other than the default d_model
      n_layers: 2
      d_model: 1024

      # Sub-sampling parameters
      subsampling: dw_striding # vggnet, striding, stacking or stacking_norm, dw_striding
      subsampling_factor: 1 # must be power of 2 for striding and vggnet
      subsampling_conv_channels: 256 # set to -1 to make it equal to the d_model
      causal_downsampling: false

      # Reduction parameters: Can be used to add another subsampling layer at a given position.
      # Having a 2x reduction will speedup the training and inference speech while keeping similar WER.
      # Adding it at the end will give the best WER while adding it at the beginning will give the best speedup.
      reduction: striding # pooling, striding, or null
      reduction_position: null # Encoder block index or -1 for subsampling at the end of encoder
      reduction_factor: 1

      # Feed forward module's params
      ff_expansion_factor: 4

      # Multi-headed Attention Module's params
      self_attention_model: rel_pos # rel_pos or abs_pos
      n_heads: 8 # may need to be lower for smaller d_models
      # [left, right] specifies the number of steps to be seen from left and right of each step in self-attention
      att_context_size: [-1, -1] # -1 means unlimited context
      att_context_style: regular # regular or chunked_limited
      xscaling: true # scales up the input embeddings by sqrt(d_model)
      untie_biases: true # unties the biases of the TransformerXL layers
      pos_emb_max_len: 5000

      # Convolution module's params
      conv_kernel_size: 9
      conv_norm_type: 'batch_norm' # batch_norm or layer_norm or groupnormN (N specifies the number of groups)
      # conv_context_size can be"causal" or a list of two integers while conv_context_size[0]+conv_context_size[1]+1==conv_kernel_size
      # null means [(kernel_size-1)//2, (kernel_size-1)//2], and 'causal' means [(kernel_size-1), 0]
      conv_context_size: null

      ### regularization
      dropout: 0.1 # The dropout used in most of the Conformer Modules
      dropout_pre_encoder: 0.1 # The dropout used before the encoder
      dropout_emb: 0.0 # The dropout used for embeddings
      dropout_att: 0.1 # The dropout for multi-headed attention modules

      # set to non-zero to enable stochastic depth
      stochastic_depth_drop_prob: 0.0
      stochastic_depth_mode: linear  # linear or uniform
      stochastic_depth_start_layer: 1

    spec_augment:
      _target_: nemo.collections.asr.modules.SpectrogramAugmentation
      freq_masks: 2 # set to zero to disable it
      time_masks: 10 # set to zero to disable it
      freq_width: 27
      time_width: 0.05

    # the following are read from the pretrained AM:
    # output_dim: null
    # encoder: null
    # preprocessor: null

  data:
    end_string: "<end_of_turn>\n"
    train_ds:
      use_lhotse: true
      multi_config: true
      audio:
        sampler_fusion: randomized_round_robin
        sampler_weights: [0.5, 0.5]
        input_cfg: /data/canary_llm/v0/datablends/full_canary/asr1.0_ast1.0_alpaca.ta0.05_suno.ta0.1_alpaca.aa0.05_magpie.gemma.mixed0.1_train.yaml
        seed: 0
        shard_seed: "trng"
        batch_size: 4
        batch_duration: null
        quadratic_duration: 20
        use_bucketing: false
        num_buckets: 30
        bucket_duration_bins: [2.92,3.474,3.924,4.335,4.728,5.11,5.487,5.872,6.288,6.696,7.128,7.62,8.208,8.934,9.883,10.56,11.22,11.88,12.51,13.05,13.59,14.13,14.64,15.17875,15.81,16.54,17.37,18.241,19.18]
        bucket_buffer_size: 20000
        num_workers: 4
        shuffle: true
        shuffle_buffer_size: 20000
        text_field: answer
        lang_field: target_lang
        pin_memory: true
        max_duration: 40  # it is set for LibriSpeech, you may need to update it for your dataset
        min_duration: 0.1
      text:
        input_cfg: /data/canary_llm/v0/datablends/jzf9dy_gemmasft.yaml
        use_multimodal_sampling: true
        batch_size: 1
        token_equivalent_duration: 0.08
        # batch_tokens: 2048
        # quadratic_factor: 2048
        use_bucketing: false
        num_buckets: 30
        num_cuts_for_bins_estimate: 10000
        bucket_buffer_size: 500
        shuffle_buffer_size: 5000
        num_workers: 4
        shuffle: true
      audio_locator: "<unused0>"
      global_batch_size: ${model.global_batch_size}
      micro_batch_size: ${model.micro_batch_size}
      max_seq_length: 4096
      min_seq_length: 1
      end_string: ${model.data.end_string}

    validation_ds:
      input_cfg: /data/canary_llm/v0/datablends/full_canary/val_reduced.yaml
      is_tarred: false
      tarred_audio_filepaths: null
      # manifest_filepath: # Path to a list of JSONL files corresponding to the source data. Data format is identical to train_ds.
      audio_locator: "<unused0>"
      global_batch_size: ${model.global_batch_size}
      micro_batch_size: ${model.micro_batch_size}
      shuffle: false
      num_workers: 4
      pin_memory: true
      max_seq_length: 4096
      min_seq_length: 1
      drop_last: false
      end_string: ${model.data.end_string}
      write_predictions_to_file: true
      output_file_path_prefix: /results/${name} # Prefix of the file to write predictions to.
      tokens_to_generate: 64
      # ASR configs
      sample_rate: 16000 #${model.audio_encoder.preprocessor.sample_rate}
      # lhotse
      use_lhotse: true
      batch_size: null
      batch_duration: 20
      quadratic_duration: 20
      use_bucketing: true
      num_buckets: 30
      bucket_duration_bins: [2.92,3.474,3.924,4.335,4.728,5.11,5.487,5.872,6.288,6.696,7.128,7.62,8.208,8.934,9.883,10.56,11.22,11.88,12.51,13.05,13.59,14.13,14.64,15.17875,15.81,16.54,17.37,18.241,19.18]
      text_field: answer
      lang_field: target_lang   # language of the text
      max_open_streams: null

      # log_every_n_steps: 10
      metric:
        name: bleu # Name of the evaluation metric to use. Options: ['exact_string_match', 'loss']
        average: null # Average the metric over the dataset. Options: ['macro', 'micro']. Works only for 'F1', 'accuracy' etc. Refer to torchmetrics for metrics where this is supported.
        num_classes: null

  optim:
    name: fused_adam
    lr: 2e-5
    weight_decay: 1e-3
    betas: 
    - 0.9
    - 0.98
    sched:
      name: CosineAnnealing
      warmup_steps: 200
      min_lr: 1e-6 # min_lr must be 0.0 for prompt learning when pipeline parallel > 1
      constant_steps: 0 # Constant steps should also be 0 when min_lr=0
      monitor: val_loss
      reduce_on_plateau: false

inference:
  greedy: true # Whether or not to use sampling ; use greedy decoding otherwise
  top_k: 50  # The number of highest probability vocabulary tokens to keep for top-k-filtering.
  top_p: 0.95 # If set to float < 1, only the most probable tokens with probabilities that add up to top_p or higher are kept for generation.
  temperature: 0.4 # sampling temperature
  all_probs: false  # whether return the log prob for all the tokens in vocab
  repetition_penalty: 1.2  # The parameter for repetition penalty. 1.0 means no penalty.
  min_tokens_to_generate: 0  # The minimum length of the sequence to be generated.
  compute_logprob: false  # a flag used to compute logprob of all the input text, a very special case of running inference, default False
  outfile_path: output.txt
  compute_attention_mask: true
